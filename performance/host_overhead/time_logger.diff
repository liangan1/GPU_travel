diff --git a/aten/src/ATen/core/boxing/KernelFunction_impl.h b/aten/src/ATen/core/boxing/KernelFunction_impl.h
index df49d6227ee..67a813dd3b3 100644
--- a/aten/src/ATen/core/boxing/KernelFunction_impl.h
+++ b/aten/src/ATen/core/boxing/KernelFunction_impl.h
@@ -5,6 +5,9 @@
 
 #include <c10/util/C++17.h>
 #include <type_traits>
+#include <fstream>
+#include <chrono>
+#include <string>
 
 namespace c10 {
 
@@ -118,7 +121,7 @@ C10_ALWAYS_INLINE Return KernelFunction::call(
   // note: Args above is intentionally not Args&&. We don't want perfect
   // forwarding, which would require Args to be deduced, but instead we
   // want callers to explicitly specify the Args.
-
+  const auto opname = toString(opHandle.operator_name());
   if constexpr (std::disjunction_v<has_symint<Args>...>) {
     if (sym_unboxed_kernel_func_ != nullptr) {
       auto* functor = boxed_kernel_func_.getFunctor();
@@ -141,12 +144,56 @@ C10_ALWAYS_INLINE Return KernelFunction::call(
     }
   } else {
     if (C10_LIKELY(unboxed_kernel_func_ != nullptr)) {
-      auto* functor = boxed_kernel_func_.getFunctor();
-      return callUnboxedKernelFunction<Return, Args...>(
+      if (opname == "aten::mm" || opname == "aten::mm.out" || opname == "aten::matmul") {
+        using clock = std::chrono::high_resolution_clock;
+        using ns = std::chrono::nanoseconds;
+        static std::ofstream csv_file("host_time_log.csv", std::ios::out | std::ios::app);
+        csv_file <<  opname << " : start\n";
+        csv_file.flush();
+        auto t0 = clock::now();
+
+        if constexpr (std::is_void<Return>::value) {
+          // When the return value is void
+          auto* functor = boxed_kernel_func_.getFunctor();
+          callUnboxedKernelFunction<Return, Args...>(
+                unboxed_kernel_func_,
+                functor,
+                dispatchKeySet,
+                std::forward<Args>(args)...);
+          auto t1 = clock::now();
+              
+          auto delta = std::chrono::duration_cast<ns>(t1 - t0).count();
+          csv_file <<  opname <<", " << delta << " ns\n";
+          csv_file.flush();
+          return;
+        } else{
+          // When the return value is not void
+          auto* functor = boxed_kernel_func_.getFunctor();
+          Return r = callUnboxedKernelFunction<Return, Args...>(
+                unboxed_kernel_func_,
+                functor,
+                dispatchKeySet,
+                std::forward<Args>(args)...);
+      
+          auto t1 = clock::now();
+
+          auto delta = std::chrono::duration_cast<ns>(t1 - t0).count();
+          csv_file <<  opname <<", " << delta << " ns\n";
+          csv_file.flush();
+          return r;
+        }
+      }
+      
+      // Non mm calls.
+      else {
+        auto* functor = boxed_kernel_func_.getFunctor();
+        return callUnboxedKernelFunction<Return, Args...>(
           unboxed_kernel_func_,
           functor,
           dispatchKeySet,
           std::forward<Args>(args)...);
+      }
     }
   }
 
diff --git a/aten/src/ATen/native/mkldnn/xpu/detail/Matmul.cpp b/aten/src/ATen/native/mkldnn/xpu/detail/Matmul.cpp
index a328b6dfdd6..dd5747fd023 100644
--- a/aten/src/ATen/native/mkldnn/xpu/detail/Matmul.cpp
+++ b/aten/src/ATen/native/mkldnn/xpu/detail/Matmul.cpp
@@ -10,8 +10,165 @@
 #include <c10/core/ScalarType.h>
 #include <oneapi/dnnl/dnnl.hpp>
 
+#include <chrono>
+#include <fstream>
+#include <iostream>
+#include <string>
+#include <tuple>
+#include <vector>
 namespace at::native::onednn {
 
+
+class TimeLogger {
+ public:
+  // Static inline member, can be defined and initialized inside the class
+  static inline std::vector<long long> starts;
+  static inline std::vector<long long> phase0;
+  static inline std::vector<long long> phase1;
+  static inline std::vector<long long> phase2;
+  static inline std::vector<long long> phase3;
+  static inline std::vector<long long> phase4;
+  static inline std::vector<long long> phase5;
+  static inline std::vector<long long> phase6;
+
+  // Static method to access the singleton instance
+  static TimeLogger& get_instance() {
+    static TimeLogger
+        instance; // Static local variable to ensure single instance
+    return instance;
+  }
+
+  void record_start() {
+    // Get the current timestamp in nanoseconds
+    auto now = std::chrono::high_resolution_clock::now();
+    auto duration = now.time_since_epoch();
+    auto nanoseconds =
+        std::chrono::duration_cast<std::chrono::nanoseconds>(duration).count();
+
+    // Store m, n, k, and timestamp in the static log_data
+    starts.push_back(nanoseconds);
+  }
+
+  void record_pre_process_step0() {
+    // Get the current timestamp in nanoseconds
+    auto now = std::chrono::high_resolution_clock::now();
+    auto duration = now.time_since_epoch();
+    auto nanoseconds =
+        std::chrono::duration_cast<std::chrono::nanoseconds>(duration).count();
+
+    // Store m, n, k, and timestamp in the static log_data
+    phase0.push_back(nanoseconds);
+  }
+
+  void record_create_desc_step1() {
+    // Get the current timestamp in nanoseconds
+    auto now = std::chrono::high_resolution_clock::now();
+    auto duration = now.time_since_epoch();
+    auto nanoseconds =
+        std::chrono::duration_cast<std::chrono::nanoseconds>(duration).count();
+
+    // Store m, n, k, and timestamp in the static log_data
+    phase1.push_back(nanoseconds);
+  }
+
+  void record_set_memory_desc_step2() {
+    // Get the current timestamp in nanoseconds
+    auto now = std::chrono::high_resolution_clock::now();
+    auto duration = now.time_since_epoch();
+    auto nanoseconds =
+        std::chrono::duration_cast<std::chrono::nanoseconds>(duration).count();
+
+    // Store m, n, k, and timestamp in the static log_data
+    phase2.push_back(nanoseconds);
+  }
+
+  void record_create_primitive_step3() {
+    // Get the current timestamp in nanoseconds
+    auto now = std::chrono::high_resolution_clock::now();
+    auto duration = now.time_since_epoch();
+    auto nanoseconds =
+        std::chrono::duration_cast<std::chrono::nanoseconds>(duration).count();
+
+    // Store m, n, k, and timestamp in the static log_data
+    phase3.push_back(nanoseconds);
+  }
+
+  void record_create_memory_step4() {
+    // Get the current timestamp in nanoseconds
+    auto now = std::chrono::high_resolution_clock::now();
+    auto duration = now.time_since_epoch();
+    auto nanoseconds =
+        std::chrono::duration_cast<std::chrono::nanoseconds>(duration).count();
+
+    // Store m, n, k, and timestamp in the static log_data
+    phase4.push_back(nanoseconds);
+  }
+
+  void record_exec_step5() {
+    // Get the current timestamp in nanoseconds
+    auto now = std::chrono::high_resolution_clock::now();
+    auto duration = now.time_since_epoch();
+    auto nanoseconds =
+        std::chrono::duration_cast<std::chrono::nanoseconds>(duration).count();
+
+    // Store m, n, k, and timestamp in the static log_data
+    phase5.push_back(nanoseconds);
+  }
+
+  void record_possible_copy_step6() {
+    // Get the current timestamp in nanoseconds
+    auto now = std::chrono::high_resolution_clock::now();
+    auto duration = now.time_since_epoch();
+    auto nanoseconds =
+        std::chrono::duration_cast<std::chrono::nanoseconds>(duration).count();
+
+    // Store m, n, k, and timestamp in the static log_data
+    phase6.push_back(nanoseconds);
+  }
+
+
+
+
+
+  // Destructor to write the log data to the file only once when the program
+  // exits
+  ~TimeLogger() {
+    std::ofstream file("host_time_log.csv", std::ios::app);
+
+    if (!file) {
+      std::cerr << "Error opening file!" << std::endl;
+      return;
+    }
+    file<< "pre_process_step0, create_desc_step1, set_memory_desc_step2, "
+           "create_primitive_step3, create_memory_step4, exec_step5, possible_copy_step6\n";
+    // Write all stored logs to the file
+    for (size_t i = 0; i < starts.size(); i++) {
+      auto s = starts[i];
+      auto p0 = phase0[i];
+      auto p1 = phase1[i];
+      auto p2 = phase2[i];
+      auto p3 = phase3[i];
+      auto p4 = phase4[i];
+      auto p5 = phase5[i];
+      auto p6 = phase6[i];
+
+      // Write the log to the file
+      file << p0 - s << "," << p1 - p0 << "," << p2 - p1 << "," <<p3 - p2 << "," << p4 - p3
+           << "," << p5 - p4 << "," << p6 - p5 << "\n";
+      file.flush();
+    }
+  }
+
+ private:
+  // Private constructor to prevent direct instantiation (Singleton pattern)
+  TimeLogger() {}
+
+  // Prevent copying and assignment
+  TimeLogger(const TimeLogger&) = delete;
+  TimeLogger& operator=(const TimeLogger&) = delete;
+};
+
+
 sycl::event matmul(
     at::Tensor& result,
     const at::Tensor& mat1,
@@ -20,6 +177,10 @@ sycl::event matmul(
     bool m2_trans,
     Attr attr,
     const std::vector<sycl::event>& deps) {
+
+  TimeLogger& cpu_obj = TimeLogger::get_instance();
+  cpu_obj.record_start();
+
   // m2_trans means mat2 is transposed from the nn.Linear perspective.
   // m2_trans==true means mat2 is [k, n] layout.
   // m2_trans==false means mat2 is [n, k] layout, aka, the default layout in
@@ -112,6 +273,8 @@ sycl::event matmul(
 
   b = b.contiguous(); // avoid reorder 2 times
 
+  cpu_obj.record_pre_process_step0();
+
   // xpu matmul support both ab/ba shape for m2 tensor, we don't check any more
   auto m1_usr_dt = get_onednn_dtype_include_double(m1);
   auto m2_usr_dt = get_onednn_dtype_include_double(m2);
@@ -179,12 +342,19 @@ sycl::event matmul(
   dnnl::matmul matmul_p;
   dnnl::matmul::primitive_desc matmul_pd;
 
+
   // STEP1: create memory desc
   m1_md = dnnl::memory::desc(m1_dims, m1_dt, m1_strides);
   m2_md = dnnl::memory::desc(m2_dims, m2_dt, m2_strides);
   dst_md = dnnl::memory::desc(dst_dims, dst_dt, dst_strides);
 
+  m1_usr_md = dnnl::memory::desc(m1_dims, m1_usr_dt, m1_strides);
+  m2_usr_md = dnnl::memory::desc(m2_dims, m2_usr_dt, m2_strides);
+  dst_usr_md = dnnl::memory::desc(dst_dims, dst_usr_dt, dst_strides);
+  cpu_obj.record_create_desc_step1();
+  // TODO : Separate
   // STEP2: creat attribute
+
   dnnl::primitive_attr pattr;
   pattr.set_post_ops(po);
 
@@ -205,23 +375,21 @@ sycl::event matmul(
       pattr.set_fpmath_mode(dnnl::fpmath_mode::strict);
     }
   }
-
+  cpu_obj.record_set_memory_desc_step2();
   // STEP3: create primitive
   if (with_bias) {
     bias_md = dnnl::memory::desc(bias_dims, bias_dt, bias_strides);
     matmul_pd = dnnl::matmul::primitive_desc(
-        engine, m1_md, m2_md, bias_md, dst_md, pattr);
+      engine, m1_md, m2_md, bias_md, dst_md, pattr);
   } else {
     matmul_pd =
-        dnnl::matmul::primitive_desc(engine, m1_md, m2_md, dst_md, pattr);
+    dnnl::matmul::primitive_desc(engine, m1_md, m2_md, dst_md, pattr);
   }
 
   matmul_p = dnnl::matmul(matmul_pd);
+  
 
-  m1_usr_md = dnnl::memory::desc(m1_dims, m1_usr_dt, m1_strides);
-  m2_usr_md = dnnl::memory::desc(m2_dims, m2_usr_dt, m2_strides);
-  dst_usr_md = dnnl::memory::desc(dst_dims, dst_usr_dt, dst_strides);
-
+  cpu_obj.record_create_primitive_step3();
   // STEP4: create memory
   auto m1_usr_m = make_onednn_memory(m1_usr_md, engine, m1.data_ptr());
   auto m2_usr_m = make_onednn_memory(m2_usr_md, engine, m2.data_ptr());
@@ -253,13 +421,13 @@ sycl::event matmul(
     auto bias_m = make_onednn_memory(bias_md, engine, b.data_ptr());
     args.insert({DNNL_ARG_BIAS, bias_m});
   }
-
+cpu_obj.record_create_memory_step4();
   sycl::event matmul_event =
       dnnl::sycl_interop::execute(matmul_p, stream, args, deps);
-
+cpu_obj.record_exec_step5();
   if (!dst.is_same(result))
     result.copy_(dst);
-
+cpu_obj.record_possible_copy_step6();
   return matmul_event;
 }
 

